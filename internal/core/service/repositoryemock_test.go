// Code generated by mockery v2.52.2. DO NOT EDIT.

package service

import (
	context "context"

	model "github.com/bubaew95/yandex-go-learn/internal/core/model"
	mock "github.com/stretchr/testify/mock"
)

// MockShortenerRepository is an autogenerated mock type for the ShortenerRepository type
type MockShortenerRepository struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *MockShortenerRepository) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserURLS provides a mock function with given fields: ctx, items
func (_m *MockShortenerRepository) DeleteUserURLS(ctx context.Context, items []model.URLToDelete) error {
	ret := _m.Called(ctx, items)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserURLS")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.URLToDelete) error); ok {
		r0 = rf(ctx, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetURLByID provides a mock function with given fields: ctx, id
func (_m *MockShortenerRepository) GetURLByID(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetURLByID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetURLByOriginalURL provides a mock function with given fields: ctx, originalURL
func (_m *MockShortenerRepository) GetURLByOriginalURL(ctx context.Context, originalURL string) (string, bool) {
	ret := _m.Called(ctx, originalURL)

	if len(ret) == 0 {
		panic("no return value specified for GetURLByOriginalURL")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, bool)); ok {
		return rf(ctx, originalURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, originalURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, originalURL)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetURLSByUserID provides a mock function with given fields: ctx, userID
func (_m *MockShortenerRepository) GetURLSByUserID(ctx context.Context, userID string) (map[string]string, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetURLSByUserID")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (map[string]string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]string); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertURLs provides a mock function with given fields: ctx, urls
func (_m *MockShortenerRepository) InsertURLs(ctx context.Context, urls []model.ShortenerURLMapping) error {
	ret := _m.Called(ctx, urls)

	if len(ret) == 0 {
		panic("no return value specified for InsertURLs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.ShortenerURLMapping) error); ok {
		r0 = rf(ctx, urls)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ping provides a mock function with given fields: ctx
func (_m *MockShortenerRepository) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetURL provides a mock function with given fields: ctx, id, url
func (_m *MockShortenerRepository) SetURL(ctx context.Context, id string, url string) error {
	ret := _m.Called(ctx, id, url)

	if len(ret) == 0 {
		panic("no return value specified for SetURL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockShortenerRepository creates a new instance of MockShortenerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShortenerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShortenerRepository {
	mock := &MockShortenerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
