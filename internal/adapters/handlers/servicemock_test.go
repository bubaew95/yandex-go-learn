// Code generated by mockery v2.52.2. DO NOT EDIT.

package handlers

import (
	context "context"

	model "github.com/bubaew95/yandex-go-learn/internal/core/model"
	mock "github.com/stretchr/testify/mock"
)

// MockShortenerService is an autogenerated mock type for the ShortenerService type
type MockShortenerService struct {
	mock.Mock
}

// DeleteUserURLS provides a mock function with given fields: ctx, items
func (_m *MockShortenerService) DeleteUserURLS(ctx context.Context, items []model.URLToDelete) error {
	ret := _m.Called(ctx, items)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserURLS")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.URLToDelete) error); ok {
		r0 = rf(ctx, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateURL provides a mock function with given fields: ctx, url, randomStringLength
func (_m *MockShortenerService) GenerateURL(ctx context.Context, url string, randomStringLength int) (string, error) {
	ret := _m.Called(ctx, url, randomStringLength)

	if len(ret) == 0 {
		panic("no return value specified for GenerateURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (string, error)); ok {
		return rf(ctx, url, randomStringLength)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) string); ok {
		r0 = rf(ctx, url, randomStringLength)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, url, randomStringLength)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetURLByID provides a mock function with given fields: ctx, id
func (_m *MockShortenerService) GetURLByID(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetURLByID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetURLByOriginalURL provides a mock function with given fields: ctx, originalURL
func (_m *MockShortenerService) GetURLByOriginalURL(ctx context.Context, originalURL string) (string, bool) {
	ret := _m.Called(ctx, originalURL)

	if len(ret) == 0 {
		panic("no return value specified for GetURLByOriginalURL")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, bool)); ok {
		return rf(ctx, originalURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, originalURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, originalURL)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetURLSByUserID provides a mock function with given fields: ctx, userID
func (_m *MockShortenerService) GetURLSByUserID(ctx context.Context, userID string) ([]model.ShortenerURLSForUserResponse, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetURLSByUserID")
	}

	var r0 []model.ShortenerURLSForUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.ShortenerURLSForUserResponse, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.ShortenerURLSForUserResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ShortenerURLSForUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertURLs provides a mock function with given fields: ctx, urls
func (_m *MockShortenerService) InsertURLs(ctx context.Context, urls []model.ShortenerURLMapping) ([]model.ShortenerURLResponse, error) {
	ret := _m.Called(ctx, urls)

	if len(ret) == 0 {
		panic("no return value specified for InsertURLs")
	}

	var r0 []model.ShortenerURLResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.ShortenerURLMapping) ([]model.ShortenerURLResponse, error)); ok {
		return rf(ctx, urls)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []model.ShortenerURLMapping) []model.ShortenerURLResponse); ok {
		r0 = rf(ctx, urls)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ShortenerURLResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []model.ShortenerURLMapping) error); ok {
		r1 = rf(ctx, urls)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *MockShortenerService) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RandStringBytes provides a mock function with given fields: n
func (_m *MockShortenerService) RandStringBytes(n int) string {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for RandStringBytes")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ScheduleURLDeletion provides a mock function with given fields: ctx, items
func (_m *MockShortenerService) ScheduleURLDeletion(ctx context.Context, items []model.URLToDelete) {
	_m.Called(ctx, items)
}

// NewMockShortenerService creates a new instance of MockShortenerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShortenerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShortenerService {
	mock := &MockShortenerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
